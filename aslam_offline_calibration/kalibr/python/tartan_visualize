#!/usr/bin/env python
# print("importing libraries")
from tartan_logging import TartanLogging
import numpy as np
import argparse
import dill
import matplotlib.pyplot as plt
import cv2
import pylab as pl
import math
from sm import PlotCollection
from matplotlib.backends.backend_pdf import PdfPages

def parseArgs():
    parser = argparse.ArgumentParser()
    parser.add_argument('-f','--file',required=True)
    parser.add_argument('-m','--mode',required=True)
    parser.add_argument('-i','--idxs', nargs='+')
    parser.add_argument('-ci','--camid',default=0)

    return parser.parse_args()

def main():
    parsed = parseArgs()

    with open(parsed.file, 'r') as f:
        tartanlog = dill.load(f)
    tartanobs = [log.ObservationDatabase_ for log in tartanlog]
    cams = [log.camera_ for log in tartanlog]
    stats = [log.stats_ for log in tartanlog]

    plotter = PlotCollection.PlotCollection("Calibration report")

    if (parsed.mode=="compare"):
        figs = list()    
        assert parsed.idxs != None
        idxs = [int(x) for x in parsed.idxs]

        compare_obs = [tartanobs[i] for i in idxs]
        f = pl.figure(1)
        f.suptitle('Reprojections')
        
        obslist = compare_obs[0].observations[int(parsed.camid)]

        # reprojections in image            
        for obs in obslist:
            pl.subplot(121)
            pl.imshow(obs.getImage(),cmap='gray')
            points = obs.getCornersImageFrame()  
            pl.scatter(points[:,0],points[:,1],color='red',s=0.3)

        obslist = compare_obs[1].observations[int(parsed.camid)]
            
        for obs in obslist:
            pl.subplot(122)
            pl.imshow(obs.getImage(),cmap='gray')
            points = obs.getCornersImageFrame()  
            pl.scatter(points[:,0],points[:,1],color='red',s=0.3)

        plotter.add_figure('Reprojections', f)
        figs.append(f)

        #POLAR plot
        f = pl.figure(2)
        f.suptitle('Polar errors')

        stat = stats[0]
        print(len(stat))
        angleError = np.array([ [ np.degrees(s.polarAngle), math.sqrt(s.squaredError)] for s in stat ])
        # sort by polar angle
        sae_1 = angleError[ angleError[:,0].argsort() ]

        stat = stats[-1]
        print(len(stat))
        angleError = np.array([ [ np.degrees(s.polarAngle), math.sqrt(s.squaredError)] for s in stat ])
        # sort by polar angle
        sae_2 = angleError[ angleError[:,0].argsort() ]

        z = np.polyfit(sae_1[:,0], sae_1[:,1], 2)
        p_1 = np.poly1d(z)(sae_1[:,0])

        z = np.polyfit(sae_2[:,0], sae_2[:,1], 2)
        p_2 = np.poly1d(z)(sae_2[:,0])

        pl.subplot(221)
        pl.scatter(sae_1[:,0],sae_1[:,1],s=0.1,alpha=0.5)
        pl.scatter(sae_2[:,0],sae_2[:,1],s=0.1,alpha=0.5)
        pl.ylim(0,5.0)
        plt.legend(['idx 1','idx2'])
        pl.grid('on')
        pl.xlabel('polar angle (deg)')
        pl.ylabel('reprojection error (pixels)')
        pl.subplot(222)
        pl.hist(sae_1[:,0],alpha=0.5,bins=list(range(210)[::20]))
        pl.hist(sae_2[:,0],alpha=0.5,bins=list(range(210)[::20]))
        plt.legend(['idx 1','idx2'])
        pl.grid('on')
        pl.xlabel('polar angle (deg)')
        pl.ylabel('count')

        pl.subplot(223)
        plt.plot(sae_1[:,0],p_1)
        plt.plot(sae_2[:,0],p_2)
        plt.legend(['idx 1','idx2'])

        pl.grid('on')
        pl.xlabel('polar angle (deg)')
        pl.ylabel('reprojection error (pixels)')
        pl.subplot(224)
        pl.hist(sae_1[:,0],alpha=0.5)
        pl.hist(sae_2[:,0],alpha=0.5)
        plt.legend(['idx 1','idx2'])
        pl.grid('on')
        pl.xlabel('polar angle (deg)')
        pl.ylabel('count')
       

        plotter.add_figure('Polar Angles', f)
        figs.append(f)

        # AZIMUTH
        #angle plot
        f = pl.figure(3)
        f.suptitle('Azimuth errors')

        stat = stats[0]
        angleError = np.array([ [ np.degrees(s.azumithalAngle), math.sqrt(s.squaredError)] for s in stat ])
        # sort by azimuthal angle
        sae_1 = angleError[ angleError[:,0].argsort() ]

        stat = stats[-1]
        angleError = np.array([ [ np.degrees(s.azumithalAngle), math.sqrt(s.squaredError)] for s in stat ])
        # sort by azimuthal angle
        sae_2 = angleError[ angleError[:,0].argsort() ]

        pl.subplot(221)
        pl.plot(sae_1[:,0],sae_1[:,1],'bx-')
        pl.grid('on')
        pl.xlabel('azimuth angle (deg)')
        pl.ylabel('reprojection error (pixels)')
        pl.subplot(222)
        pl.hist(sae_1[:,0],alpha=0.5)
        pl.hist(sae_2[:,0],alpha=0.5)
        pl.grid('on')
        pl.xlabel('azimuth angle (deg)')
        pl.ylabel('count')


        pl.subplot(223)
        pl.plot(sae_2[:,0],sae_2[:,1],'bx-')
        pl.grid('on')
        pl.xlabel('azimuth angle (deg)')
        pl.ylabel('reprojection error (pixels)')
        pl.subplot(224)
        pl.hist(sae_1[:,0],alpha=0.5)
        pl.hist(sae_2[:,0],alpha=0.5)
        pl.grid('on')
        pl.xlabel('azimuth angle (deg)')
        pl.ylabel('count')
       

        plotter.add_figure('Azimuth Angles', f)
        figs.append(f)

        pdf=PdfPages('report.pdf')
        for fig in figs:
            pdf.savefig(fig)
        pdf.close()

        # pl.show()
        # plotter.show()


    


if __name__ == "__main__":
    main()
